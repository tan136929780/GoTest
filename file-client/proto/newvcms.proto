syntax = "proto3";

package vnos.newvcms;

option go_package = "./proto/newvcms";

service InstanceService {
  rpc CreateInstance(InstanceCreateRequest) returns (CreateResult){};
  rpc DeleteInstance(InstanceDeleteRequest) returns (DeleteResult){};
  rpc UpdateInstance(InstanceUpdateRequest) returns (UpdateResult){};
  rpc FindInstance(InstanceFindRequest) returns (InstanceFindResponse){};
  rpc FindInstanceById(InstanceFindByIdRequest) returns (InstanceFindByIdResponse){};
  rpc FindMetaDataByIdentifier(MetaDataFindRequest) returns (MetaDataFindResponse){};
}


message RelationFilter {
  string relation_identifier = 1;
  // 条件组织 %s占位 ((%s and %s) or (%s and %s)) and %s
  string expression = 2;
  // 关系属性条件 条件顺序和%s相同
  repeated PropertyExpression property_expression = 3;
  //源节点条件
  string source_identifier = 4;
  //目标节点条件
  string target_identifier = 5;
  //源节点条件
  SearchCondition condition = 6;
}

message PropertyExpression {
  // 属性
  string property = 1;
  // 操作符
  string operator = 2;
  // 属性值
  string value = 3;
}

message SearchCondition {
  // 获取identifier
  string type_identifier = 1;
  // 返回的数据列 [property1, property2]
  repeated string properties = 2;
  int32 page = 3;
  int32 page_size = 4;
  repeated Sorter sorters = 5;
  // 条件组织 %s占位 ((%s and %s) or (%s and %s)) and %s
  string expression = 6;
  // 关系属性条件 条件顺序和%s相同
  repeated PropertyExpression property_expression = 7;
  bool is_groupby = 8;
  string groupby_property = 9;
  //关系条件
  repeated RelationFilter relation_filters = 10;
}

message RelationInfo {
  // 关系identifier
  string relation_identifier = 1;
  //源节点条件
  string source_identifier = 2;
  //目标节点条件
  string target_identifier = 3;
  // 关联模型占位uid，规则：_:uid，如果是实际uid则输入实际uid
  repeated string relation_uid = 4;
}

message InstanceInfo {
  // 当前模型identifier
  string type_identifier = 1;
  map<string, string> values = 2;
  // 关联插入时占位当前模型uid，规则：_:uid
  string uid = 4;
  // 关系条件
  repeated RelationInfo relation_info = 5;
}

message InstanceCreateRequest {
  repeated InstanceInfo instances = 1;
}

message InstanceCreateResponse {
  int32 code = 1;
  string message = 2;
  repeated string uid = 3;
}

message InstanceUpdateRequest {
  repeated InstanceInfo instances = 1;
}

message InstanceFindRequest {
  repeated SearchCondition condition = 1;
}

message FindResponse {
  int32 page = 1;
  int32 page_size = 2;
  string total = 3;
  string data = 4;
}

message InstanceFindResponse {
  int32 code = 1;
  string message = 2;
  repeated FindResponse result = 3;
}

message MetaDataFindRequest {
  //模型标识
  string identifier = 1;
}

message MetaDataFindResponse {
  int32 code = 1;
  string message = 2;
  string data = 3;
}

message RelationDeleteInfo {
  // 关系模型identifier
  string relation_identifier = 1;
  //源节点条件
  string source_identifier = 2;
  //目标节点条件
  string target_identifier = 3;
  // 关联uid列表
  repeated string relation_uid = 4;
}

// 删除
message DeleteInfo {
  // 模型标识
  string identifier = 1;
  //uid
  string uid = 2;
  // 删除的边
  repeated RelationDeleteInfo relation_delete_info = 3;
}

message InstanceDeleteRequest {
  // 判断是否边操作
  OperationEnum operation = 1;
  repeated DeleteInfo deleteInfo = 2;
}

message DeleteResult {
  int32 code = 1 ;
  string message = 2;
  // 删除成功的个数
  int32 num = 3;
}

message CreateResult {
  // 状态码
  int32 code = 1;
  // 返回消息
  string message = 2;
  // 唯一标识
  repeated string uid = 3;
}

message UpdateResult {
  //状态码
  int32 code = 1;
  //返回消息
  string message = 2;
}

message InstanceFindByIdRequest {
  //唯一标识
  string uid = 1;
  //repeated
  repeated string identifiers = 2;

}

message Sorter {
  enum OrderEnum {
    ORDERASC = 0;
    ORDERDESC = 1;
  }
  string propertyIdentifier = 1;
  OrderEnum order = 2;
}

enum OperationEnum {
  NORMAL = 0;
  RELATION = 1;
}

message InstanceFindByIdResponse {
  // 状态码
  int32 code = 1;
  // 返回消息
  string message = 2;
  // 数据
  string data = 6;
}
